[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ai-documentation-agent"
version = "0.1.0"
description = "Intelligent documentation assistant powered by Azure OpenAI, LangChain & Vector Search"
authors = ["Pablo Marín <pablomarin.aidev@gmail.com>"]
maintainers = ["Pablo Marín <pablomarin.aidev@gmail.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://github.com/pablomarin/ai-documentation-agent"
repository = "https://github.com/pablomarin/ai-documentation-agent"
documentation = "https://documentation-agent.com"
keywords = ["ai", "documentation", "assistant", "langchain", "azure", "openai", "rag"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "app"}]

[tool.poetry.dependencies]
python = "^3.10"

# FastAPI and Web Framework
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
python-multipart = "^0.0.6"
starlette = "^0.27.0"

# AI and LangChain
langchain = "^0.2.0"
langchain-openai = "^0.1.0"
langchain-core = "^0.2.0"
langgraph = "^0.1.0"
tiktoken = "^0.7.0"

# Vector Database
qdrant-client = "^1.8.1"

# Database
sqlalchemy = "^2.0.25"
psycopg2-binary = "^2.9.9"
alembic = "^1.13.1"

# Authentication & Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
bcrypt = "^4.1.2"
authlib = "^1.3.0"

# Data Validation
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"

# Document Processing
PyPDF2 = "^3.0.1"

# Utilities
python-dotenv = "^1.0.1"
uuid = "^1.30"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^8.2.1"
pytest-asyncio = "^0.23.6"
pytest-cov = "^5.0.0"
pytest-mock = "^3.12.0"
httpx = "^0.27.0"

# Code Quality
black = "^24.4.2"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.10.0"
bandit = "^1.7.5"

# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.18"
mkdocstrings = {extras = ["python"], version = "^0.25.0"}

# Development Tools
pre-commit = "^3.7.1"
ipython = "^8.24.0"
rich = "^13.7.1"

[tool.poetry.group.deployment.dependencies]
gunicorn = "^21.2.0"
docker = "^7.0.0"

# ==================== TOOL CONFIGURATIONS ====================

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["migrations"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "qdrant_client.*",
    "tiktoken.*",
    "PyPDF2.*",
    "langchain.*",
    "langgraph.*",
    "jose.*",
    "passlib.*",
    "bcrypt.*",
    "authlib.*",
]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 100
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long (handled by black)
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "migrations",
    ".venv",
    "venv",
    "build",
    "dist",
]

# ==================== SCRIPTS ====================

[tool.poetry.scripts]
dev = "uvicorn main:app --reload --port 8001"
prod = "gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8001"
test = "pytest"
format = "black app/ tests/"
lint = "flake8 app/ tests/"
type-check = "mypy app/"
security = "bandit -r app/"
docs = "mkdocs serve"
